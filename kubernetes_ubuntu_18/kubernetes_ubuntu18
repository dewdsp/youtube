apt-get upgrade -y
# Set static IP address on interface
network:
  ethernets:
    ens160:
      dhcp4: false
      dhcp6: false
      addresses:
        - 192.168.0.10/24
        - 192.168.0.11/24
        - 2a02:8071:31b6:8800::11/128
      gateway4: 192.168.0.1
      gateway6: 2a02:8071:31b6:8800::4998
      nameservers:
        addresses:
          - 8.8.8.8
          - 8.8.4.4
          - 2001:4860:4860::8888
          - 2001:4860:4860::8844
  version: 2

# Get Kubesprey and prepare inventory

git clone -b v2.13.2 https://github.com/kubernetes-sigs/kubespray.git
cd kubespray
cp -rfp inventory/sample inventory/mycluster
declare -a IPS=(172.16.103.132)
CONFIG_FILE=inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py ${IPS[@]}

# Upload RSA keys to the server

rename node in the inventory/mycluster/hosts.yaml
ssh-copy-id -i ~/.ssh/id_rsa ubuntu@172.16.103.132
ssh ubuntu@172.16.103.132
sudo cp /home/ubuntu/.ssh/authorized_keys /root/.ssh/authorized_keys

# Prepare additional disk for path provision
add new disk to VM
mkfs.ext4 /dev/sdb
DISK_UUID=$(blkid -s UUID -o value /dev/sdb)
mkdir -p /opt/local-path-provisioner/
mount /dev/sdb /opt/local-path-provisioner/
echo "UUID=$DISK_UUID /opt/local-path-provisioner/ ext4 defaults 0 0" >> /etc/fstab

# Install Kubernetes + local_path_provisioner_enabled

ansible-playbook -i inventory/mycluster/hosts.yaml  --become --become-user=root cluster.yml \
-e "ansible_ssh_user=root \
local_path_provisioner_enabled=true \
dashboard_enabled=false"

# get kubernetes config file
scp root@192.168.0.10:/root/.kube/config ~/.kube/config

# we have only one node,  we don't need to more one pod for core-dns
# we will remove dns-autoscaler
kubectl delete deployment dns-autoscaler --namespace=kube-system
# scale current count of replicas to 1
kubectl scale deployments.apps -n kube-system coredns --replicas=1


# Install ingress for baremetal (NodePort)
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/deploy.yaml


kubectl create namespace cert-manager
helm repo add jetstack https://charts.jetstack.io
helm repo update
helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --version v0.15.1 \
  --set installCRDs=true


kubectl create ns concourse
curl -LO https://cert-manager.io/docs/tutorials/acme/example/production-issuer.yaml
edit email
kubectl -n concourse apply -f production-issuer.yaml
kubectl -n concourse describe issuer letsencrypt-prod

# Install Concourse
kubectl -n concourse apply -f production-issuer.yaml
helm repo add concourse https://concourse-charts.storage.googleapis.com/
helm -n concourse install concourse -f values.yaml concourse/concourse


HAProxy
frontend front_http
        bind 192.168.0.11:80,[2a02:8071:31b6:8800::11]:80
        mode tcp
        default_backend back_http

backend back_http
        mode tcp
        balance roundrobin
        server http1 192.168.0.10:32292 check

frontend front_https
        bind 192.168.0.11:443,[2a02:8071:31b6:8800::11]:443
        mode tcp
        default_backend back_https

backend back_https
        mode tcp
        balance roundrobin
        server https1 192.168.0.10:31783 check